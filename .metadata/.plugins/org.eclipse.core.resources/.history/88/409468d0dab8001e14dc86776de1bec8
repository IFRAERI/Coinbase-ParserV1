package com.coinbase.connector;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;

import com.coinbase.connector.DataProcessor.PriceData;

public class Application {
    private CoinbaseConnector coinbaseConnector;
    private GoogleDriveConnector driveService;
    private HistoricalDataFetcher dataFetcher;
    private DataProcessor dataProcessor;

    public void initialize() throws GeneralSecurityException, IOException {
        coinbaseConnector = CoinbaseConnector.getInstance();
        driveService = new GoogleDriveConnector();
        dataFetcher = new HistoricalDataFetcher();
        dataProcessor = new DataProcessor();

        driveService.setupDriveConnection();
    }

    public void start() {
        LocalDate startDate = LocalDate.of(2021, 1, 1);
        LocalDate endDate = LocalDate.now();
        long totalDays = ChronoUnit.DAYS.between(startDate, endDate.plusMonths(1)); // Планируемый период работы

        while (true) { // Бесконечный цикл
            LocalDate currentEndDate = startDate.plusMonths(1);
            if (currentEndDate.isAfter(LocalDate.now())) {
                currentEndDate = LocalDate.now(); // Не идем за сегодняшнюю дату
            }

            try {
                // Получение и обработка данных по каждой валютной паре
                processCurrencyPair("BTC-USD", startDate, currentEndDate);
                processCurrencyPair("ETH-USD", startDate, currentEndDate);
                processCurrencyPair("ETH-BTC", startDate, currentEndDate);

                // Вывод прогресса
                long processedDays = ChronoUnit.DAYS.between(startDate, currentEndDate);
                double progress = (double) processedDays / totalDays * 100;
                System.out.printf("Прогресс обработки: %.2f%%\n", progress);

                // Обновление даты начала для следующего цикла
                startDate = currentEndDate;

                if (LocalDate.now().isAfter(startDate.plusDays(1))) {
                    startDate = startDate.plusDays(1); // Сдвигаем на следующий день после завершения обработки
                }

                Thread.sleep(1000); // Пауза между запросами
            } catch (Exception e) {
                System.err.println("Ошибка в процессе обработки данных: " + e.getMessage());
                // Обработка исключений и возможный выход из цикла
            }
        }
    }


    private void processCurrencyPair(String currencyPair, LocalDate startDate, LocalDate endDate) throws IOException {
        String currencyData = dataFetcher.fetchMonthlyData(currencyPair, startDate, endDate);
        List<RawPriceData> rawCurrencyData = dataProcessor.parseJsonToRawPriceData(currencyData);
        List<PriceData> processedCurrencyData = dataProcessor.processPriceData(rawCurrencyData);
        String currencyDataJson = dataProcessor.convertPriceDataListToJson(processedCurrencyData);
        driveService.saveDataToDrive(currencyPair + "-data.json", currencyDataJson);
    }

    // ... другие методы класса ...ыск
}
