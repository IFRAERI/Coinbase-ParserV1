package com.coinbase.connector;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.api.client.http.FileContent;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.auth.http.HttpCredentialsAdapter;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;

public class GoogleDriveConnector {

    private static final String APPLICATION_NAME = "Google Drive API Java Quickstart";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private Drive service;
    private static final String CREDENTIALS_FILE_PATH = "/home/aleksandr/Documents/coinbasev1-cf25e6c95d35.json";

    /**
     * Создает GoogleCredentials объект для авторизации.
     * 
     * 
     */
    private static GoogleCredentials getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        return ServiceAccountCredentials
            .fromStream(new FileInputStream(CREDENTIALS_FILE_PATH))
            .createScoped(Collections.singleton(DriveScopes.DRIVE));
    }

    // Метод для настройки соединения с Drive
    private static boolean checkCredentialsFile() {
        java.io.File credentialsFile = new java.io.File(CREDENTIALS_FILE_PATH);
        if (credentialsFile.exists() && credentialsFile.isFile() && credentialsFile.canRead()) {
            System.out.println("Файл учетных данных доступен.");
            return true;
        } else {
            System.err.println("Файл учетных данных не найден или не доступен для чтения.");
            return false;
        }
    }
    public void setupDriveConnection() {
        if (!checkCredentialsFile()) {
            System.err.println("Не удалось подготовить учетные данные для Google Drive.");
            return; // Прекращаем выполнение, если учетные данные недоступны
        }

        // Попытка установить соединение с Google Drive...
        try {
            final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
            service = new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, new HttpCredentialsAdapter(getCredentials(HTTP_TRANSPORT)))
                    .setApplicationName(APPLICATION_NAME)
                    .build();
            System.out.println("Successfully connected to Google Drive.");
        } catch (GeneralSecurityException e) {
            System.err.println("Security exception in setting up Google Drive connection: " + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("IO exception in setting up Google Drive connection: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Unexpected error in setting up Google Drive connection: " + e.getMessage());
            e.printStackTrace();
        }
    }

    
    private File findFileOnGoogleDrive(String fileName) throws IOException {
        FileList result = service.files().list()
                                 .setQ("name = '" + fileName + "'")
                                 .setSpaces("drive")
                                 .setFields("files(id, name)")
                                 .execute();

        // Логирование результатов поиска
        if (result.getFiles().isEmpty()) {
            System.out.println("Файл '" + fileName + "' не найден.");
        } else {
            System.out.println("Найден файл '" + fileName + "' с ID: " + result.getFiles().get(0).getId());
        }

        for (File file : result.getFiles()) {
            if (file.getName().equals(fileName)) {
                return file;
            }
        }
        return null;
    }

    

    // Метод для создания файла на Google Drive
    public boolean createFileOnGoogleDrive(String fileName, String content) {
        java.io.File tempFile = null;
        try {
            if (content == null || content.isEmpty()) {
                System.err.println("Content is empty, file creation aborted.");
                return false;
            }

            File fileMetadata = new File();
            fileMetadata.setName(fileName);

            tempFile = java.io.File.createTempFile("temp", ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                writer.write(content);
            }

            FileContent mediaContent = new FileContent("text/plain", tempFile);
            File file = service.files().create(fileMetadata, mediaContent)
                                .setFields("id")
                                .execute();
            System.out.println("File ID: " + file.getId());
            return true;
        } catch (IOException e) {
            System.err.println("Error uploading file to Google Drive: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }



    // Метод для обновления файла на Google Drive
    public boolean updateFileOnGoogleDrive(File file, String newContent) {
        java.io.File tempFile = null;
        try {
            tempFile = java.io.File.createTempFile("temp", ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                writer.write(newContent);
            }

            FileContent mediaContent = new FileContent("text/plain", tempFile);
            File updatedFile = service.files().update(file.getId(), null, mediaContent)
                                        .setFields("id")
                                        .execute();
            System.out.println("File content updated successfully. File ID: " + updatedFile.getId());
            return true;
        } catch (IOException e) {
            System.err.println("Error updating file on Google Drive: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }


    public boolean appendToFileOnGoogleDrive(File file, String additionalContent) {
        try {
            // Получение текущего содержимого файла
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            service.files().get(file.getId())
                   .executeMediaAndDownloadTo(outputStream);
            String currentContent = outputStream.toString();

            JSONArray currentData;
            try {
                // Попытка преобразовать текущее содержимое в JSON массив
                currentData = new JSONArray(currentContent);
            } catch (JSONException e) {
                // Если текущее содержимое не является валидным JSON массивом, инициализируем новый JSON массив
                currentData = new JSONArray();
            }

            // Преобразование новых данных в JSON объект
            JSONArray newData = new JSONArray(additionalContent);

            // Добавление новых данных
            for (int i = 0; i < newData.length(); i++) {
                currentData.put(newData.getJSONObject(i));
            }

            // Создание временного файла для обновления содержимого
            java.io.File tempFile = java.io.File.createTempFile("temp", ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                writer.write(currentData.toString());
            }

            // Обновление файла на Google Drive
            FileContent mediaContent = new FileContent("text/plain", tempFile);
            file = service.files().update(file.getId(), file, mediaContent).execute();
            System.out.println("Content appended to file successfully. File ID: " + file.getId());
            return true;
        } catch (IOException e) {
            System.err.println("Error appending to file on Google Drive: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }



    // Метод для проверки уникальности данных
    private boolean isDataPresent(JSONArray currentData, JSONObject newData) {
        for (int i = 0; i < currentData.length(); i++) {
            JSONObject existingData = currentData.getJSONObject(i);
            if (existingData.similar(newData)) {
                return true; // Данные уже существуют
            }
        }
        return false; // Данные уникальны
    }



    // Метод для сохранения данных на Google Drive
    public void saveDataToDrive(String fileName, String data) throws IOException {
        File file = findFileOnGoogleDrive(fileName);

        if (file != null) {
            // Файл существует, добавляем к его содержимому
            appendToFileOnGoogleDrive(file, data);
        } else {
            // Файл не существует, создаем новый
            createFileOnGoogleDrive(fileName, data);
        }
    }
    
}
